import requests
import sys
from stix2 import CourseOfAction, Vulnerability, Relationship
from AnotherPlan_config import *

class Vulns:
    BASE_URL = BASE_URL
    API_KEY = cip_API
    HEADERS = {"x-api-key": API_KEY}
    check_blown_cve_id = []
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(self.HEADERS)
        self.objects_exited_vuln = []  # List to store objects

    def _request(self, endpoint, params):
        """Make a GET request and return the JSON response."""
        url = self.BASE_URL + endpoint
        response = self.session.get(url, params=params)
        # print('url:',url,'\n')
        # print('params:',params,'\n')
        try:
            data = response.json()
            # print(data)
            assert data['status'] == 200

        except AssertionError:
            print(f"[-] Invalid URL : {url}, status code : {data['message']}\n")
            sys.exit(1)

        return data

    def get_exploits(self, cve_id):
        """Get exploits by CVE ID."""
        params = {"cve_id": cve_id, "offset": 10}
        return self._request(f"v1/exploit/search?query=cve_id:{cve_id}", params)

    def _create_course_of_action(self, cve_id):
        """Create a CourseOfAction object."""
        description = f"SCP Client - Multiple Vulnerabilities (SSHTranger Things)"
        return CourseOfAction(name="Exploit DB", description=description)

    def _create_relationship(self, source, target):
        """Create a Relationship object."""
        return Relationship(relationship_type="related-to", source_ref = source.id, target_ref = target.id)
    
    @classmethod
    def check_blown(cls, cve_id):
        """Class method to check if CVE ID is in the list of blown CVEs."""
        is_blown = cve_id in cls.check_blown_cve_id
        return is_blown

    def process_vulnerabilities(self,vulnerabilities,port_num, product, product_version, tool=None, software=None):
        """Process a list of vulnerabilities."""
        objects = []
        relationships = []
        
        exploit_db_exists = {
            vuln['cve_id']
            for vuln in vulnerabilities
            if not Vulns.check_blown(vuln['cve_id']) and (self.get_exploits(vuln['cve_id'])['data']['count'] > 0)
        }

        # print(exploit_db_exists)
        for vuln in vulnerabilities:
            vuln_cve_id = vuln['cve_id']               
            vuln_cve_description = vuln['cve_description']
            Vulns.check_blown_cve_id.append(vuln_cve_id)
            if (tool and software) or tool:
                # Connect vulnerability to the existing tool
                vulnerability = Vulnerability(name=vuln_cve_id, description=vuln_cve_description, external_references=[{'source_name': 'cve', 'external_id': vuln_cve_id}])
                objects.append(vulnerability)
                tool_and_vuln_relationship = Relationship(relationship_type="related-to", source_ref=tool[0].id, target_ref=vulnerability)
                relationships.append(tool_and_vuln_relationship)
            elif software:
                # Connect vulnerability to the existing software
                vulnerability = Vulnerability(name=vuln_cve_id, description=vuln_cve_description, external_references=[{'source_name': 'cve', 'external_id': vuln_cve_id}])
                objects.append(vulnerability)
                software_and_vuln_relationship = Relationship(relationship_type="related-to", source_ref=software[0].id, target_ref=vulnerability)
                relationships.append(software_and_vuln_relationship)

            if vuln_cve_id in exploit_db_exists:
                # print(vuln_cve_id in exploit_db_exists)
                action = self._create_course_of_action(vuln_cve_id)
                objects.append(action)
                relationship = self._create_relationship(action, vulnerability)
                relationships.append(relationship)

        return objects, relationships