import requests
import sys
from stix2 import CourseOfAction, Vulnerability, Relationship
from concurrent.futures import ThreadPoolExecutor
from functools import partial
from Enterprise_config import *

class Vulns:
    BASE_URL = BASE_URL
    API_KEY = cip_API
    HEADERS = {"x-api-key": API_KEY}

    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(self.HEADERS)

    def _request(self, endpoint, params):
        """Make a GET request and return the JSON response."""
        url = self.BASE_URL + endpoint
        response = self.session.get(url, params=params)
        # print(response)
        
        try:
            data = response.json()
            assert data['status'] == 200
        except AssertionError:
            print(f"[-] Invalid URL : {url}, status code : {data['message']}\n")
            sys.exit(1)
        return data 

    def get_exploits(self, cve_id):
        """Get exploits by CVE ID."""
        params = {"cve_id": cve_id, "offset": 10}
        return self._request(f"v1/exploit/search?query=cve_id:{cve_id}", params)

    def _create_course_of_action(self, cve_id):
        """Create a CourseOfAction object."""
        description = f"SCP Client - Multiple Vulnerabilities (SSHTranger Things)"
        return CourseOfAction(name="Exploit DB", description=description)

    def _create_relationship(self, source, target):
        """Create a Relationship object."""
        return Relationship(relationship_type="Has", source_ref=source.id, target_ref=target.id)

    def process_vulnerability(self, vuln, tool, software):
        vuln_cve_id = vuln['cve_id']
        vuln_cve_description = vuln['cve_description']

        cve_id_vuln = self.get_exploits(vuln_cve_id)

        exploit_DB_exit = set()
        if cve_id_vuln['data']['count'] > 0:
            exploit_DB_exit.add(vuln_cve_id)

        vuln_object = []
        relationship_tool_or_software_with_vnln = []

        if (tool and software) or tool:
            vulnerability = Vulnerability(name=vuln_cve_id, description=vuln_cve_description,
                                         external_references=[{'source_name': 'cve', 'external_id': vuln_cve_id}])
            vuln_object.append(vulnerability)
            tool_and_vuln_relationship = Relationship(relationship_type="Has", source_ref=tool[0].id,
                                                      target_ref=vulnerability)
            relationship_tool_or_software_with_vnln.append(tool_and_vuln_relationship)
        elif software:
            vulnerability = Vulnerability(name=vuln_cve_id, description=vuln_cve_description,
                                         external_references=[{'source_name': 'cve', 'external_id': vuln_cve_id}])
            vuln_object.append(vulnerability)
            software_and_vuln_relationship = Relationship(relationship_type="Has", source_ref=software[0].id,
                                                          target_ref=vulnerability)
            relationship_tool_or_software_with_vnln.append(software_and_vuln_relationship)

        return vuln_object, relationship_tool_or_software_with_vnln, exploit_DB_exit

    def process_vulnerabilities(self, vuln_list, port_num, product, product_version, tool=None, software=None):
        vuln_object = []
        relationship_tool_or_software_with_vnln = []
        exploit_DB_exit = set()
        exploit_DB_exit_list = []

        max_workers = len(vuln_list)
        if max_workers <= 0:
            max_workers = 1 

        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            partial_process_vulnerability = partial(self.process_vulnerability, tool=tool, software=software)
            results = executor.map(partial_process_vulnerability, vuln_list)

            for result in results:
                vuln_obj, relationship_obj, exploit_exit = result
                vuln_object.extend(vuln_obj)
                relationship_tool_or_software_with_vnln.extend(relationship_obj)
                exploit_DB_exit.update(exploit_exit)

        if exploit_DB_exit:
            for item in vuln_object:
                if item.name in exploit_DB_exit:
                    exploit_db_object = self._create_course_of_action(exploit_DB_exit)
                    exploit_DB_exit_list.append(exploit_db_object)
                    relationship = self._create_relationship(exploit_db_object, item)
                    relationship_tool_or_software_with_vnln.append(relationship)

        if exploit_DB_exit_list:
            vuln_object.extend(exploit_DB_exit_list)

        return vuln_object, relationship_tool_or_software_with_vnln